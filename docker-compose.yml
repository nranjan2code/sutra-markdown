# Sutra-Markdown V2 - Docker Compose Configuration
# Full-stack local deployment with all services

services:
  # ============================================================================
  # Model Cache - Pre-built models container (production optimization)
  # ============================================================================
  model-cache:
    build:
      context: .
      dockerfile: Dockerfile.models
    container_name: sutra-model-cache
    volumes:
      - model_cache:/app/models
    restart: "no"  # Only runs to populate cache
    profiles:
      - cache-models

  # ============================================================================
  # Redis - Caching & Queue Management
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: sutra-redis
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sutra-network
    restart: unless-stopped

  # ============================================================================
  # MinIO - S3-compatible object storage (optional)
  # ============================================================================
  minio:
    image: minio/minio:latest
    container_name: sutra-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - sutra-network
    restart: unless-stopped

  # ============================================================================
  # Sutra-Markdown API - Production V2.2 Architecture
  # ============================================================================
  sutra-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_ENV: ${BUILD_ENV:-production}
    container_name: sutra-api
    environment:
      # Application settings
      SUTRA_ENVIRONMENT: ${SUTRA_ENVIRONMENT:-production}
      SUTRA_LOG_LEVEL: ${SUTRA_LOG_LEVEL:-INFO}
      SUTRA_LOG_FORMAT: ${SUTRA_LOG_FORMAT:-json}
      
      # Security settings
      SUTRA_RATE_LIMIT_PER_MINUTE: ${SUTRA_RATE_LIMIT_PER_MINUTE:-60}
      SUTRA_MAX_FILE_SIZE_MB: ${SUTRA_MAX_FILE_SIZE_MB:-500}
      SUTRA_ENABLE_AUTH: ${SUTRA_ENABLE_AUTH:-false}
      SUTRA_CORS_ORIGINS: ${SUTRA_CORS_ORIGINS:-*}
      
      # Embedding service - HIGH PERFORMANCE LOCAL
      EMBEDDING_MODE: local
      NOMIC_DEVICE: ${NOMIC_DEVICE:-auto}
      NOMIC_BATCH_SIZE: ${NOMIC_BATCH_SIZE:-64}
      EMBEDDING_WORKERS: ${EMBEDDING_WORKERS:-4}
      
      # LLM providers - for Tier 3 conversions only
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_URL: redis://redis:6379
      CACHE_ENABLED: ${CACHE_ENABLED:-true}
      CACHE_TTL: ${CACHE_TTL:-86400}
      
      # MinIO/S3 configuration (optional)
      S3_ENDPOINT: ${S3_ENDPOINT:-http://minio:9000}
      S3_ACCESS_KEY: ${MINIO_ROOT_USER:-sutra}
      S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-CHANGE_ME_SECURE_PASSWORD}
      S3_BUCKET: ${MINIO_BUCKET_NAME:-sutra-documents}
      
      # Performance tuning
      MAX_WORKERS: ${MAX_WORKERS:-10}
      BATCH_SIZE: ${BATCH_SIZE:-100}
      
      # Conversion settings
      DEFAULT_QUALITY: ${DEFAULT_QUALITY:-high}
      TIER_1_THRESHOLD: ${TIER_1_THRESHOLD:-0.6}
      TIER_2_THRESHOLD: ${TIER_2_THRESHOLD:-0.8}
      ENABLE_INTELLIGENCE: ${ENABLE_INTELLIGENCE:-true}
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      # Development mode: mount source code for hot reload
      - ${DEV_CODE_MOUNT:-/dev/null}:/app/sutra:${DEV_CODE_MODE:-rw}
      
      # Persistent storage
      - ./cache:/app/cache
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./outputs:/app/outputs
      - model_cache:/app/models
    depends_on:
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sutra-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: ${API_CPU_LIMIT:-2}
          memory: ${API_MEMORY_LIMIT:-6G}
        reservations:
          cpus: ${API_CPU_RESERVE:-1}
          memory: ${API_MEMORY_RESERVE:-3G}
    profiles:
      - api
      - ""  # Default profile

  # ============================================================================
  # High-Performance Embedding Workers (for scaling)
  # ============================================================================
  embedding-worker:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_ENV: production
    environment:
      # Embedding-specific settings
      EMBEDDING_MODE: local
      NOMIC_DEVICE: ${NOMIC_DEVICE:-auto}
      NOMIC_BATCH_SIZE: ${NOMIC_BATCH_SIZE:-128}
      EMBEDDING_WORKERS: 1  # One worker per container
      
      # Redis for coordination
      REDIS_URL: redis://redis:6379
      
      # Performance optimization
      LOG_LEVEL: ${EMBEDDING_LOG_LEVEL:-WARNING}
    volumes:
      - model_cache:/app/models:ro  # Read-only models
      - ./logs/workers:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - sutra-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: ${EMBEDDING_CPU_LIMIT:-2}
          memory: ${EMBEDDING_MEMORY_LIMIT:-4G}
        reservations:
          cpus: ${EMBEDDING_CPU_RESERVE:-1}
          memory: ${EMBEDDING_MEMORY_RESERVE:-2G}
    profiles:
      - high-performance
      - scaling

  # ============================================================================
  # Web UI - Material Design 3 Frontend (Optional)
  # ============================================================================
  web-ui:
    build:
      context: ./web-ui
      dockerfile: Dockerfile
    container_name: sutra-web-ui
    environment:
      VITE_API_BASE_URL: http://localhost:8000
      VITE_WS_BASE_URL: ws://localhost:8000
    ports:
      - "3000:80"
    depends_on:
      - sutra-api
    networks:
      - sutra-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    profiles:
      - web-ui
      - full

  # ============================================================================
  # Nginx - Reverse proxy & load balancer (optional)
  # ============================================================================
  nginx:
    image: nginx:alpine
    container_name: sutra-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - sutra-api
    networks:
      - sutra-network
    restart: unless-stopped
    profiles:
      - production
      - full

# ============================================================================
# Networks
# ============================================================================
networks:
  sutra-network:
    driver: bridge
    name: sutra-network

# ============================================================================
# Volumes
# ============================================================================
volumes:
  redis_data:
    driver: local
  minio_data:
    driver: local
  model_cache:
    driver: local
